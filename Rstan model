functions {
  real[] msis (real t, real[] y, real[] theta,
             real[] x_r, int[] x_i) {
               
// state, the volumes in each compartment, y;
// theta, variables used to compute f, which depend on the model parameters;
// x_r, real variables used to evaluate f, which only depend on fixed data;
// x_i, integer values used to evaluate f, which only depend on fixed data.
// fit RSV and data from 2009 to 2019... 9 seasons (n_week_to_fit = 9 * 52) this is the data fit part
// total week of the data input n_week = (80 + 11 + 9) = 100 * 52 = 5200 weeks; using 80 years burin-in time
// total length of influenza data should be 5200; 
// influenza data has two parts, the burn-in part with a length of 80*52 (cases = 0) and fitting part with a length of 20 * 52

      int agegroups = x_i[1];
      int q = x_i[2];
      int n_week = x_i[3];
      
      real birthrate[agegroups] = x_r[1:agegroups];
      real rho1 = x_r[agegroups+1];
      real rho2 = x_r[agegroups+2];
      real gamma1 = x_r[agegroups+3];
      real gamma2 = x_r[agegroups+4];
      real gamma3 = x_r[agegroups+5];
      real sigma1 = x_r[agegroups+6];
      real sigma2 = x_r[agegroups+7];
      real sigma3 = x_r[agegroups+8];
      real AGE[agegroups]= x_r[(agegroups+9):(9+2*agegroups-1)]; // aging rate
      real c2[agegroups*agegroups]=x_r[(10+2*agegroups-1):(9+2*agegroups+agegroups*agegroups-1)];
      real mu[agegroups] = x_r[(10+2*agegroups+agegroups*agegroups-1):(9+2*agegroups+agegroups*agegroups+agegroups-1)];
      real omega = x_r[9+2*agegroups+agegroups*agegroups+agegroups];
      real beta = x_r[9+2*agegroups+agegroups*agegroups+agegroups+1];
      real b1 = x_r[9+2*agegroups+agegroups*agegroups+agegroups+2];
      real phi = x_r[9+2*agegroups+agegroups*agegroups+agegroups+3];
      real Influenza[n_week] = x_r[(9+2*agegroups+agegroups*agegroups+agegroups+4):(9+2*agegroups+agegroups*agegroups+agegroups+4+5199)];
      real reporting_fraction = x_r[9+2*agegroups+agegroups*agegroups+agegroups+4+5200];
      
      // this part should change to viral interference parameters and the duration of the temporary protection
      // two parameters to be estimated 
      
     // real beta = theta[1];
     // real b1 = theta[2];
     // real phi = theta[3];
      real xi = theta[1];
      real eta = theta[2];
      
      //real omega = theta[4];
      
      real dydt[10*agegroups]; // 10 model compartments with 21 age groups
                               // M, S0, I1, S1, I2, S2, I3, S3, I4, R
                               
      real lambda[agegroups]; // force of infection 
      real InfectN[agegroups]; // infecious numbers 
       
      real season_txn = (1+b1*cos(2*pi()*(t-phi*52.1775)/52.1775)); // seasonal force 
      
      for (k in 1:agegroups) {
      InfectN[k] = (y[k+2*agegroups]+rho1*y[k+4*agegroups]+rho2*y[k+6*agegroups]+rho2*y[k+8*agegroups]);
      } 
      
      for (a in 1:agegroups) {
      
       lambda[a] = season_txn*beta*gamma1/sum(y)*sum(to_vector(c2[((a-1)*agegroups+1):(a*agegroups)]).*to_vector(InfectN));
      
       dydt[a] =  log(birthrate[a]+1)/52.1775*sum(y) - omega * y[a] -  AGE[a] * y[a] - mu[a] * y[a] + eta*y[a+9*agegroups]; //M
       dydt[a+agegroups] =  omega*y[a] - lambda[a]*y[a+agegroups] - (AGE[a]+mu[a])*y[a+agegroups] + eta*y[a+9*agegroups]; //S0
       dydt[a+2*agegroups] =  lambda[a]*y[a+agegroups] - gamma1*y[a+2*agegroups] - (AGE[a]+mu[a])*y[a+2*agegroups];//I1
       dydt[a+3*agegroups] =  gamma1*y[a+2*agegroups] - sigma1*lambda[a]*y[a+3*agegroups] - (AGE[a]+mu[a])*y[a+3*agegroups] + eta*y[a+9*agegroups];//S1
       dydt[a+4*agegroups] =  sigma1*lambda[a]*y[a+3*agegroups] - gamma2*y[a+4*agegroups] - (AGE[a]+mu[a])*y[a+4*agegroups];//I2
       dydt[a+5*agegroups] =  gamma2*y[a+4*agegroups] - sigma2*lambda[a]*y[a+5*agegroups] - (AGE[a]+mu[a])*y[a+5*agegroups] + eta*y[a+9*agegroups];//S2
       dydt[a+6*agegroups] =  sigma2*lambda[a]*y[a+5*agegroups] - gamma3*y[a+6*agegroups] - (AGE[a]+mu[a])*y[a+6*agegroups];//I3
       dydt[a+7*agegroups] =  gamma3*y[a+6*agegroups] + gamma3*y[a+8*agegroups] - sigma3*lambda[a]*y[a+7*agegroups] - (AGE[a]+mu[a])*y[a+7*agegroups] + eta*y[a+9*agegroups];//S3
       dydt[a+8*agegroups] =  sigma3*lambda[a]*y[a+7*agegroups] - gamma3*y[a+8*agegroups] - (AGE[a]+mu[a])*y[a+8*agegroups];
       dydt[a+9*agegroups] =  xi*Influenza[n_week]*(y[a+agegroups] + y[a+3*agegroups] + y[a+5*agegroups] + y[a+7*agegroups] + y[a]) - 5*eta*y[a+9*agegroups]-(AGE[a]+mu[a])*y[a+9*agegroups];
       
       

       
       if (a >1){
		    dydt[a] = dydt[a]+ AGE[a-1]*y[a-1];
		    dydt[a+agegroups] = dydt[a+agegroups]+ AGE[a-1]*y[a+agegroups-1];
		    dydt[a+2*agegroups] = dydt[a+2*agegroups]+ AGE[a-1]*y[a+2*agegroups-1];
		    dydt[a+3*agegroups] = dydt[a+3*agegroups]+ AGE[a-1]*y[a+3*agegroups-1];
		    dydt[a+4*agegroups] = dydt[a+4*agegroups]+ AGE[a-1]*y[a+4*agegroups-1];
		    dydt[a+5*agegroups] = dydt[a+5*agegroups]+ AGE[a-1]*y[a+5*agegroups-1];
		    dydt[a+6*agegroups] = dydt[a+6*agegroups]+ AGE[a-1]*y[a+6*agegroups-1];
		    dydt[a+7*agegroups] = dydt[a+7*agegroups]+ AGE[a-1]*y[a+7*agegroups-1];
		    dydt[a+8*agegroups] = dydt[a+8*agegroups]+ AGE[a-1]*y[a+8*agegroups-1];
		    dydt[a+9*agegroups] = dydt[a+9*agegroups]+ AGE[a-1]*y[a+9*agegroups-1];
		}
       
       }
       
       
      
      return dydt;
  }
}

// Fixed data is declared in the data block:
data {
  int<lower=1> n_week; // THIS SHOULD BE 5200 weeks (100 years including 80 years burn-ins)
  int<lower=1> agegroups; // 21 age groups
  int q; // equal to 1 
  real y0[10*agegroups];
  real t0;
  real ts[n_week];
  real birthrate[agegroups];
  real mu[agegroups];
  real rho1;
  real rho2;
  real gamma1;
  real gamma2;
  real gamma3;
  real sigma1;
  real sigma2;
  real sigma3;
  int<lower=1> hosp_cases[n_week];
  int hosp_age[8];
  real hosp1[agegroups];
  real hosp2[agegroups];
  real hosp3[agegroups];
  real c2[agegroups*agegroups];
  real AGE[agegroups];
  real omega;
  real b1; // estimated from model calibration 
  real beta; // estimated from model calibration 
  real phi; // estimated from model calibration 
  real Influenza[n_week];   
  real reporting_fraction;
}


transformed data {
  real x_r[9+2*agegroups+agegroups*agegroups+agegroups+4+5200]; // NEED to change the actual number of parameters 
  int x_i[3];
  x_i[1] = agegroups;
  x_i[2] = q;
  x_i[3] = n_week;
  
  x_r[1:agegroups]= birthrate;
  x_r[agegroups+1]=rho1;
  x_r[agegroups+2]=rho2;
  x_r[agegroups+3]=gamma1;
  x_r[agegroups+4]=gamma2;
  x_r[agegroups+5]=gamma3;
  x_r[agegroups+6]=sigma1;
  x_r[agegroups+7]=sigma2;
  x_r[agegroups+8]=sigma3;
  x_r[(agegroups+9):(9+2*agegroups-1)]=AGE;
  x_r[(10+2*agegroups-1):(9+2*agegroups+agegroups*agegroups-1)]=c2;
  x_r[(10+2*agegroups+agegroups*agegroups-1):(9+2*agegroups+agegroups*agegroups+agegroups-1)]=mu;
  x_r[9+2*agegroups+agegroups*agegroups+agegroups]=omega;
  x_r[9+2*agegroups+agegroups*agegroups+agegroups+1]=b1;
  x_r[9+2*agegroups+agegroups*agegroups+agegroups+2]=beta;
  x_r[9+2*agegroups+agegroups*agegroups+agegroups+3]=phi;
  x_r[(9+2*agegroups+agegroups*agegroups+agegroups+4):(9+2*agegroups+agegroups*agegroups+agegroups+4+5199)]=Influenza;
  x_r[9+2*agegroups+agegroups*agegroups+agegroups+4+5200]=reporting_fraction;
}

parameters {
  //real<lower=0> xi;
  real log_xi;
  real<lower=0,upper=14> eta;
  }

transformed parameters{
  real y[n_week, 10*agegroups]; // y is the states matrix that has row length=n_week and columns=9 (9 is number of model components)
  real rel_inf[n_week, agegroups];
  real lambda[n_week, agegroups];
    // outcomes
  matrix[n_week,agegroups] HOSP_AGE;
  vector[8] output_hosp_age;
  // vector[n_week] total_children;
  vector<lower = 0>[n_week] output_hosp; // overall case incidence by week
  real theta[2];
  
  {
    //theta[1] = xi;
    theta[1] = 10^log_xi;
    theta[2] = eta;
    
    
    y = integrate_ode_bdf(msis, y0, t0, ts, theta, x_r, x_i, 1.0E-10, 1.0E-10, 1.0E3);

  }
  
  
  for(i in 1:n_week){
    
        for(j in 1:10*agegroups){
    if (y[i,j] <= 0.0) y[i,j] = 1e-12;}
    
      for (k in 1:agegroups) {
      rel_inf[i,k] = (y[i,k+2*agegroups]+rho1*y[i,k+4*agegroups]+rho2*y[i,k+6*agegroups]+rho2*y[i,k+8*agegroups]);
      }
      
      for (a in 1:agegroups) {
      
       lambda[i,a] = (1+b1*cos(2*pi()*(i-phi*52.1775)/52.1775))*beta*gamma1/sum(y[i,])*sum(to_vector(c2[((a-1)*agegroups+1):(a*agegroups)]).*to_vector(rel_inf[i,]));
              HOSP_AGE[i,a] = 
			hosp1[a]*lambda[i,a]*y[i,a+agegroups]
			+hosp2[a]*lambda[i,a]*sigma1*y[i,a+3*agegroups]	
			+hosp3[a]*lambda[i,a]*sigma2*y[i,a+5*agegroups]
			+hosp3[a]*lambda[i,a]*sigma3*y[i,a+7*agegroups];
       }

    output_hosp[i] = reporting_fraction*sum(HOSP_AGE[i,]);
    
    
   //total_children[i]=HOSP_AGE[i,1]+HOSP_AGE[i,2]+HOSP_AGE[i,3]+
   // HOSP_AGE[i,4]+HOSP_AGE[i,5]+HOSP_AGE[i,6]+HOSP_AGE[i,7]+HOSP_AGE[i,8];
    }

    //for (b in 1:8) {
    //output_hosp_age[b] = sum(HOSP_AGE[,b])/sum(total_children);}
    
}

model {
  // priors
  // beta ~ normal(3,1) T[1,5]; //truncated at 0
  // b1 ~ normal(0.2,0.05) T[0.05,1]; //truncated at 0,1
 // phi ~ normal(1.4,0.5) T[0,2*pi()];
 // omega ~ lognormal(-1,0.6) T[0,5];
 //report_ratio ~ beta(2,2); //truncated at 0,1
  
  log_xi ~ normal(-3,.5);
  eta ~ normal(5,2) T[1,9];
  
  
  //sampling distribution
  for(i in 1:n_week){
  target += poisson_lpmf(hosp_cases[i]| output_hosp[i]);}
  
  //target += multinomial_lpmf (hosp_age|output_hosp_age);
}

