# library(tidyverse)
# source("revision/parameter_setting_viral_interference.R")
# source("revision/RSV_transmission_model_interferen_climate.R")
# calibrated_model_parameters <- readRDS("revision/calibrated_parms_viral_interference_model3.rds")
# my_parmset_interference <- list(PerCapitaBirthsYear=PerCapitaBirthsYear,
#                                 WidthAgeClassMonth = WidthAgeClassMonth,
#                                 DurationMatImmunityDays = DurationMatImmunityDays,
#                                 mu = migration_rates_gp,
#                                 rho1=rho1,
#                                 rho2=rho2,
#                                 dur.days1=dur.days1,
#                                 dur.days2=dur.days2,
#                                 dur.days3=dur.days3,
#                                 yinit.matrix=yinit.matrix,
#                                 baseline.txn.rate = calibrated_model_parameters$baseline.txn.rate,
#                                 Amp = calibrated_model_parameters$Amp ,
#                                 phi = calibrated_model_parameters$phi,
#                                 reporting_fraction = calibrated_model_parameters$reporting_fraction,
#                                 q=q,
#                                 contact=contact_mat,
#                                 sigma1=sigma1,
#                                 sigma2=sigma2,
#                                 sigma3= sigma3,
#                                 time.step = 'week',
#                                 xi1 = calibrated_model_parameters$xi1,
#                                 xi2 = calibrated_model_parameters$xi2,
#                                 xi3 = calibrated_model_parameters$xi3,
#                                 eta = calibrated_model_parameters$eta,
#                                 influenza1 = influenza1,
#                                 influenza2 = influenza2,
#                                 influenza3 = influenza3)
# source("revision/predictions_viral_interference.R")
# saveRDS(results, "revision/viral_interference_best_case.rds")
# 
# my_parmset_interference <- list(PerCapitaBirthsYear=PerCapitaBirthsYear,
#                                 WidthAgeClassMonth = WidthAgeClassMonth,
#                                 DurationMatImmunityDays = DurationMatImmunityDays,
#                                 mu = migration_rates_gp,
#                                 rho1=rho1,
#                                 rho2=rho2,
#                                 dur.days1=dur.days1,
#                                 dur.days2=dur.days2,
#                                 dur.days3=dur.days3,
#                                 yinit.matrix=yinit.matrix,
#                                 baseline.txn.rate = calibrated_model_parameters$baseline.txn.rate,
#                                 Amp = calibrated_model_parameters$Amp ,
#                                 phi = calibrated_model_parameters$phi,
#                                 reporting_fraction = calibrated_model_parameters$reporting_fraction,
#                                 q=q,
#                                 contact=contact_mat,
#                                 sigma1=sigma1,
#                                 sigma2=sigma2,
#                                 sigma3= sigma3,
#                                 time.step = 'week',
#                                 xi1 = 0,
#                                 xi2 = 0,
#                                 xi3 = 0,
#                                 eta = calibrated_model_parameters$eta,
#                                 influenza1 = influenza1,
#                                 influenza2 = influenza2,
#                                 influenza3 = influenza3)
# source("revision/predictions_viral_interference.R")
# saveRDS(results, "revision/viral_interference_basemodel.rds")
# 

 

results <- readRDS("revision/viral_interference_basemodel.rds")
results2 <- readRDS("revision/viral_interference_best_case.rds")

burnN <- 2444

results.burned <- results[-c(1:burnN),]
results.burned2 <- results2[-c(1:burnN),]

pop.all <- rowSums(results.burned[,-1])
pop.all2 <- rowSums(results.burned2[,-1])

infected.cols <- results.burned[,
                                c(grep('I1', colnames(results.burned)))]
# grep('I2', colnames(results.burned)),
# grep('I3', colnames(results.burned)),
# grep('I4', colnames(results.burned)))]

infected.cols2 <- results.burned2[,
                                  c(grep('I1', colnames(results.burned2)))]
# grep('I2', colnames(results.burned)),
# grep('I3', colnames(results.burned)),
# grep('I4', colnames(results.burned)))]



susp.cols <- results.burned[,
                            c(grep('S0', colnames(results.burned)))]
# grep('S0', colnames(results.burned2)),
# grep('S0', colnames(results.burned2)),
# grep('S0', colnames(results.burned2)))]

susp.cols2 <- results.burned2[,
                              c(grep('S0', colnames(results.burned2)))]
# grep('S0', colnames(results.burned2)),
# grep('S0', colnames(results.burned2)),
# grep('S0', colnames(results.burned2)))]




refractory.cols <- results.burned[,
                                  c(grep('R1', colnames(results.burned)))]
# grep('R3', colnames(results.burned)),
# grep('R4', colnames(results.burned)),
# grep('R5', colnames(results.burned)))]

refractory.cols2 <- results.burned2[,
                                    c(grep('R1', colnames(results.burned2)))]
# grep('R3', colnames(results.burned)),
# grep('R4', colnames(results.burned)),
# grep('R5', colnames(results.burned)))]




# Sum up the infected individuals at each time point
infected.all <- apply(infected.cols,1,sum)
susp.cols <- apply(susp.cols,1,sum)
refractory.cols <- apply(refractory.cols,1, sum)
x = susp.cols/pop.all
y = infected.all/pop.all
z = refractory.cols


# Sum up the infected individuals at each time point
infected.all2 <- apply(infected.cols2,1,sum)
susp.cols2 <- apply(susp.cols2,1,sum)
refractory.cols2 <- apply(refractory.cols2,1, sum)
x2 = susp.cols2/pop.all2
y2 = infected.all2/pop.all2
z2 = refractory.cols2/pop.all2


clean_data <-  readRDS("data_process/clean_data_RSV_FLU_subset.rds")


phase_plot <- data.frame(S = x,
                         S2 = x2,
                         Z = z2,
                         I = y,
                         I2 = y2,
                         season = clean_data$season,
                         date = clean_data$date,
                         rsv = clean_data$RSV)

# phase_plot %>% filter(season == "2009-2010" | season == "2010-2011") %>%
#   ggplot() +
#   geom_path(aes(x = S, y = I, color = "S1", linetype = season), linewidth = 1) +
#   geom_path(aes(x = S2, y = I2, color = "S1 (interference)", linetype = season), linewidth = 1) +
#   # geom_path(aes(x = date, y = Z, color = "R1"), linewidth = 1) +
#   # geom_path(aes(x = date, y = I, color = "I"), linetype = "dashed", linewidth = 1) +
#   # geom_path(aes(x = date, y = I2, color = "I1 (interference)"), linetype = "dashed", linewidth = 1) +
#   # geom_vline(aes(xintercept = as.Date("2010-07-01")), color = "grey", linetype = "dashed", linewidth = 1)+
#   scale_color_manual(name = NULL,
#                      values = c(
#                        "S1" = "black",
#                        "S1 (interference)" = "#d94801")) + 
#                        #"R1" = "#6baed6",
#                        #"I" = "black",
#                        #"I1 (interference)" = "#d94801")) +
#   guides(color = "none") +
#   theme_minimal()  +
#   ylab("Proportion to total population") + xlab("Date") +
#   #theme(legend.key = element_rect(fill = "white", colour = "white"), legend.position = "right") +
#   theme(panel.border = element_blank(), axis.line = element_line(colour = "black")) +
#   theme(
#     axis.text.x = element_text(face="bold"),
#     axis.text.y = element_text(face="bold"),
#     axis.title.x = element_text(face="bold"),
#     axis.title.y = element_text(face="bold"),
#     plot.title = element_text(face="bold", hjust = 0.5),
#     panel.grid.major = element_blank(),
#     #panel.grid.minor = element_blank(),
#     legend.position = "top") +
#   theme(axis.text.x = element_text(color="black",
#                                    size = 20, angle=0),
#         axis.text.y = element_text(color="black",
#                                    size= 20, angle=0),
#         text = element_text(size = 20))





phase_plot2 <- data.frame(cases = c(x,x2,z2,y,y2,clean_data$RSV/13000) * 100,
                          season = rep(clean_data$season),
                          date = rep(clean_data$date),
                          type = rep(c("Susceptible population", "Temporarily-immune population" ,"Infected population"), c(936*2, 936, 936*3)),
                          group = rep(c("S1","S1(i)", "R1", "I1", "I1(i)", "Data"), each = 936))


# 
# phase_plot2 <- data.frame(cases = c(x,x2,z2,y,y2) * 100,
#                           season = rep(clean_data$season),
#                           date = rep(clean_data$date),
#                           type = rep(c("Susceptible and temporarily-immune population","Infected population"), c(1040*3, 1040*2)),
#                           group = rep(c("S1","S1(i)", "R1", "I1", "I1(i)"), each = 1040))


color_blocks <- data.frame(
  xmin = as.Date(c("1998-07-06", "2009-06-29", "2010-06-28")), 
  xmax = as.Date(c("2009-06-29", "2010-06-28", "2016-06-27")),
  fill = c("#91bfdb", "#af8dc3", "#fc8d59")
)



phase_plot2 %>% 
  mutate(type = factor(type, levels = c("Susceptible population", "Temporarily-immune population","Infected population") )) %>% 
  # filter(season == "2009-2010" | 
  #          season == "2010-2011" | 
  #          season == "2011-2012"|
  #          season == "2012-2013"|
  #          # season == "2013-2014"|
  #          # season == "2014-2015"|
  #          # season == "2015-2016"|
  #          season == "2006-2007"|
  #          season == "2008-2009"|
  #          season == "2007-2008") %>% 
  ggplot() + 
  # geom_vline(aes(xintercept = as.Date("2010-07-01")), color = "grey", linetype = "dashed", linewidth = 1)+ 
  # geom_vline(aes(xintercept = as.Date("2011-07-01")), color = "grey", linetype = "dashed", linewidth = 1)+ 
  # #geom_vline(aes(xintercept = as.Date("2012-07-01")), color = "grey", linetype = "dashed", linewidth = 1)+ 
  # #geom_vline(aes(xintercept = as.Date("2013-07-01")), color = "grey", linetype = "dashed", linewidth = 1)+ 
  # #geom_vline(aes(xintercept = as.Date("2014-07-01")), color = "grey", linetype = "dashed", linewidth = 1)+ 
  # #geom_vline(aes(xintercept = as.Date("2015-07-01")), color = "grey", linetype = "dashed", linewidth = 1)+ 
  # geom_vline(aes(xintercept = as.Date("2009-07-01")), color = "grey", linetype = "dashed", linewidth = 1)+ 
  # geom_vline(aes(xintercept = as.Date("2008-07-01")), color = "grey", linetype = "dashed", linewidth = 1)+ 
  geom_path(aes(x = date, y = cases, group = group, color = group), linewidth = 2) + 
  geom_rect(data = color_blocks, aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf, fill = fill), alpha = 0.05) +
  scale_fill_lancet()+
  facet_wrap(~type, nrow = 3, scales = "free_y") + 
  scale_color_manual(name = NULL,
                     values = c(
                       "S1" = "black",
                       "S1(i)" = "#d94801",
                       "R1" = "#6baed6",
                       "I1" = "black",
                       "I1(i)" = "#d94801",
                       "Data" = "cornflowerblue")) + 
  ylab("% of total population") + xlab("Date") +
  theme_minimal()+
  theme(panel.border = element_blank(), axis.line = element_line(colour = "black")) +
  theme(
    axis.text.x = element_text(face="bold"),
    axis.text.y = element_text(face="bold"),
    axis.title.x = element_text(face="bold"),
    axis.title.y = element_text(face="bold"),
    plot.title = element_text(face="bold", hjust = 0.5),
    panel.grid.major = element_blank(),
    strip.text = element_text(size = 20, face = "bold"),
    #panel.grid.minor = element_blank(),
    legend.position = "NA") + 
  theme(axis.text.x = element_text(color="black",
                                   size = 20, angle=0),
        axis.text.y = element_text(color="black",
                                   size= 20, angle=0),
        text = element_text(size = 20))  



 
